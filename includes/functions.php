<?php
/**
 * WordPress OAuth Functions
 * 
 * @author Justin Greer <justin@justin-greer.com>
 * @package WordPress OAuth Server
 *
 * @todo Convert entire file into library ( class )
 */

// Hook into core filters
require_once dirname(__FILE__) . '/filters.php' ;

// Hook into core actions
require_once( dirname(__FILE__) . '/actions.php' );

/**
 * Generates a 40 Character key is generated by default but should be adjustable in the admin
 * @return [type] [description]
 *
 * @todo Allow more characters to be added to the character list to provide complex keys
 */
function wo_gen_key( $length = 40 ) {

	// Gather the settings
	$options = get_option("wo_options");
	$user_defined_length = (int) $options["client_id_length"];
	
	// If user setting is larger than 0, then define it
	if ( $user_defined_length > 0 ) {
		$length = $user_defined_length;
	}

	$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	$randomString = '';

	for ($i = 0; $i < $length; $i++) {
		$randomString .= $characters[rand(0, strlen($characters) - 1)];
	}

	return $randomString;
}

/**
 * Blowfish Encryptions
 * @param  [type]  $input  [description]
 * @param  integer $rounds [description]
 * @return [type]          [description]
 *
 * REQUIRES ATLEAST 5.3.x
 */
function wo_crypt($input, $rounds = 7) {
	$salt = "";
	$salt_chars = array_merge(range('A', 'Z'), range('a', 'z'), range(0, 9));
	for ($i = 0; $i < 22; $i++) {
		$salt .= $salt_chars[array_rand($salt_chars)];
	}
	return crypt($input, sprintf('$2a$%02d$', $rounds) . $salt);
}

/** 
 * Check if there is more than one client in the system
 * 
 * @return boolean [description]
 */
function has_a_client (){
	global $wpdb;
	$count = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}oauth_clients");
	//print_r($count);
	if (count($count) >= 1)
		return true;
}

/**
 * Get the client IP multiple ways since REMOTE_ADDR is not always the best way to do so
 * @return [type] [description]
 */
function client_ip(){
	$ipaddress = '';
    if (getenv('HTTP_CLIENT_IP'))
        $ipaddress = getenv('HTTP_CLIENT_IP');
    else if(getenv('HTTP_X_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
    else if(getenv('HTTP_X_FORWARDED'))
        $ipaddress = getenv('HTTP_X_FORWARDED');
    else if(getenv('HTTP_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_FORWARDED_FOR');
    else if(getenv('HTTP_FORWARDED'))
        $ipaddress = getenv('HTTP_FORWARDED');
    else if(getenv('REMOTE_ADDR'))
        $ipaddress = getenv('REMOTE_ADDR');
    else
        $ipaddress = 'UNKNOWN';
 
    return $ipaddress;
}

/**
 * Valid the license
 * @param  [type] $l [description]
 * @return [type]    [description]
 */
function _vl() {
	return true;
}

function license_status (){
	$options = get_option('wo_options');
	$status = 'valid';
	switch($status){
		case 'invalid':
			echo 'Invalid. Activate your license now.';
			break;	
		case 'valid':
			echo 'Valid';
			break;
	}

}